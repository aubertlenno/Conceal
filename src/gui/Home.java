/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.*;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.Account;

/**
 *
 * @author Lenno
 */
public class Home extends javax.swing.JFrame {
    
    String accEmail;
    String accName;
    String accPass;

    void retrieveAccountInfo(Account a) {
        this.accEmail = a.getEmail();
        this.accName = a.getName();
        this.accPass = a.getPassword();
        nameLabel.setText(accName);
    }
    
    /**
     * Creates new form Home
     */
    public Home(Account a) {
        initComponents();
        retrieveAccountInfo(a);
        
        // Opening the file to show in the table
        try {
            String fileName = "src/file/credentials/" + accName + ".txt";
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            String line; // Read each line of the file until reaching the end (null)
            br.readLine();
            while ((line = br.readLine()) != null) {
                if (!line.equals("deleted:deleted:deleted:deleted")) {
                    String[] dataRow = line.split(":");
                    if (dataRow.length >= 3) {  // to avoid ArrayIndexOutOfBoundsException
                        String[] requiredData = { dataRow[1], dataRow[2] };
                        model.addRow(requiredData);
                    }
                }
            }
        } catch (FileNotFoundException e) {
              JOptionPane.showMessageDialog(null, "File not found.");
        } catch (IOException e) {
              JOptionPane.showMessageDialog(null, "Error reading the file.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        helloLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        logotext = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        signOutButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conceal");

        nameLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 18)); // NOI18N

        helloLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 18)); // NOI18N
        helloLabel.setText("Hello,");

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        logotext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logotext.png"))); // NOI18N
        logotext.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        refreshButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        viewButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        signOutButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        signOutButton.setText("Sign Out");
        signOutButton.setToolTipText("");
        signOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutButtonActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Credential Title", "Username"
            }
        ));
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Microsoft PhagsPa", 0, 14)); // NOI18N
        jLabel1.setText("Search / Filter:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(helloLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameLabel))
                    .addComponent(logotext)
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(signOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logotext)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(helloLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(signOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        // Check if the user has selected a credential row.
        if (getSelectedCredName() == null && getSelectedUsername() == null && getSelectedPassword() == null) {
            // Show an error message if no credential row is selected.
            JOptionPane.showMessageDialog(this, "You must select a credential row before choosing to view, modify or delete", "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            // Open ViewCredential window
            ViewCredential view = new ViewCredential(new Account(accName, accEmail, accPass));
            view.nameTextField.setText(getSelectedCredName());
            view.usernameTextField.setText(getSelectedUsername());
            view.passwordField.setText(getSelectedPassword());
            view.setVisible(true);
            view.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        // Open AddCredential window
        AddCredential add = new AddCredential(new Account(accName, accEmail, accPass));
        add.setTitle("Conceal");
        add.setVisible(true);
        add.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        add.setResizable(false);
        
        // Refresh the table after the AddCredential window is closed
        add.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                refresh();
            }
        });
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        // Check if a credential has been selected or not
        if (getSelectedCredName() == null && getSelectedUsername() == null) {
            JOptionPane.showMessageDialog(this,
                "You must select a credential row before choosing to view, modify or delete", "Error!",
                JOptionPane.ERROR_MESSAGE);
        } else {
            // Open EditCredential window
            Account acc = new Account(accName, accEmail, accPass);
            EditCredential edit = new EditCredential(acc);
            edit.nameTextField.setText(getSelectedCredName());
            edit.usernameTextField.setText(getSelectedUsername());
            edit.setVisible(true);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        // Check whether a line is already selected or not
        if (getSelectedCredName() == null && getSelectedUsername() == null && getSelectedPassword() == null) {
            JOptionPane.showMessageDialog(this, "You must select a credential row before choosing to view, edit or delete", "Error!", JOptionPane.ERROR_MESSAGE);
        
        // Show confirmation pop-up
        } else {
            int option = JOptionPane.OK_CANCEL_OPTION;
            int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this credential?", "Delete Credential", option);
            if (result == JOptionPane.OK_OPTION) {
                // Delete the credential
                deleteCredLine(getSelectedCredentialLine());
                JOptionPane.showMessageDialog(this, "Your credential was deleted successfully", "Delete Credential", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
        // Refresh the table
        refresh();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void signOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutButtonActionPerformed
        // TODO add your handling code here:
        // Open Login window
        Login login = new Login();
        login.setVisible(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_signOutButtonActionPerformed

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        // TODO add your handling code here:
        // To search for an element in the table
        String query = searchTextField.getText();
        filter(query);
    }//GEN-LAST:event_searchTextFieldKeyReleased

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed

    }//GEN-LAST:event_searchTextFieldActionPerformed

    // Method to refresh the table
    public void refresh() {
        String fileName = "src/file/credentials/" + accName + ".txt";
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        try {
            // Clear the table
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }

            // Open the file
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);

            // Skip the first line
            br.readLine();

            // Load the data from the file
            String line;
            while ((line = br.readLine()) != null) {
                if (!line.equals("deleted:deleted:deleted:deleted")) {
                    String[] dataRow = line.split(":");
                    if (dataRow.length >= 3) {  // to avoid ArrayIndexOutOfBoundsException
                        String[] requiredData = { dataRow[1], dataRow[2] };
                        model.addRow(requiredData);
                    }
                }
            }

            // Close the file
            br.close();
            fr.close();

        } catch (IOException ex) {
            // Handle any exceptions that might occur
            ex.printStackTrace();
        }
    }
    
    // Method to do the searching for element in the table
    private void filter(String query) {
        DefaultTableModel dm = (DefaultTableModel) table.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dm);
        table.setRowSorter(tr);
        
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + searchTextField.getText()));
        
    }
    
    // Method to create a BufferedReader for a specific file.
    public BufferedReader getFileReader() {
    try {
        // Instantiate and return a BufferedReader for the credentials file.
        return new BufferedReader(new FileReader(new File("src/file/credentials/" + accName + ".txt")));
    } catch (FileNotFoundException e) {
        // Output the error if the file doesn't exist.
        e.printStackTrace();
        return null;
    }
}

    // This method retrieves the name of the selected credential from the table.
    public String getSelectedCredName() {
        int selectedRow = table.getSelectedRow();
        // Fetch the name from the first column if a row is selected.
        return selectedRow != -1 ? (String) table.getValueAt(selectedRow, 0) : null;
    }

    // This method retrieves the username of the selected credential from the table.
    public String getSelectedUsername() {
        int selectedRow = table.getSelectedRow();
        // Fetch the username from the second column if a row is selected.
        return selectedRow != -1 ? (String) table.getValueAt(selectedRow, 1) : null;
    }

    // Method to get the password associated with selected credential from the file.
    public String getSelectedPassword() {
        if (table.getSelectedRow() != -1) {
            try (BufferedReader reader = getFileReader()) {
                String line;
                while ((line = reader.readLine()) != null) {
                    // If the line matches the selected credential, extract and return the password.
                    String[] parts = line.split(":");
                    if (parts[1].equals(getSelectedCredName()) && parts[2].equals(getSelectedUsername())) {
                        return parts[3];
                    }
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        return null;
    }

    // Method to get the entire line of selected credential from the file.
    public String getSelectedCredentialLine() {
        if (table.getSelectedRow() != -1) {
            try (BufferedReader reader = getFileReader()) {
                String line;
                while ((line = reader.readLine()) != null) {
                    // If the line matches the selected credential, return the line.
                    String[] parts = line.split(":");
                    if (parts[1].equals(getSelectedCredName()) && parts[2].equals(getSelectedUsername())) {
                        return line;
                    }
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        return null;
    }

    // Method to delete a credentials from the file.
    public void deleteCredLine(String line) {
        try {
            File file = new File("src/file/credentials/" + accName + ".txt");
            StringBuilder content = new StringBuilder();

            // Read the original contents of the file.
            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNextLine()) {
                    content.append(scanner.nextLine()).append(System.lineSeparator());
                }
            }

            // Replace the specified line with a placeholder indicating deletion.
            String updatedContent = content.toString().replace(line, "deleted:deleted:deleted:deleted");

            // Write the modified content back to the file.
            try (FileWriter writer = new FileWriter(file)) {
                writer.write(updatedContent);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel helloLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logotext;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton signOutButton;
    protected javax.swing.JTable table;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
